Git l√©p√©sek:

-Hozzunk l√©tre egy k√∂nyvt√°rat a projektnek. -> l√©pj√ºnk bele a TC-vel a code . paraccsal. /VSC megny√≠lik a mapp√°ban/

-Hozzuk l√©tre a f√°jlt vagy m√°soljuk ide amivel dolgozunk. /pl. index.html, style.css, data.txt stb./

-Nyissunk egy termin√°lt a VSC-ben.

-A termin√°lban adjuk ki a git init parancsot. /l√©trej√∂n egy rejtett f√°jl - .git n√©ven/

-Adjuk ki a git add index.html parancsot, ha t√∂bb f√°jl van akkor mindre egyes√©vel vagy git add * 
    (ez mindent hozz√°ad a stage-hez ami a mapp√°ban van) /√©rtelemszer≈±en ha nem index.html akkor azt √≠rjuk helyette :)/

-Adjuk ki a git commit -m "Els≈ë commit vagy amit akarsz :)" parancsot.

-Ezek csak akkor kellenek ha t√°voli repository-t akarunk. Ha csak a saj√°t g√©pen csin√°ljuk akkor ez nem kell.
    -Jelentkezz√ºnk be a github.com-on az accountunkkal √©s k√©sz√≠ts√ºnk egy √∫j repository-t. /create new repository/

    -Megjelenik egy git parancsokb√≥l √°ll√≥ k√≥dr√©szlet.

    -Innen a git branch... -al kezd≈ëd≈ë sorokt√≥l egyes√©vel m√°soljuk be  a termin√°lba.

-K√©sz a git-√ºnk. 

-Ahogy haladunk el≈ëre a projekttel √©s √∫gy gondoljuk hogy menten√ºnk kellene, akkor √∫jra kiadjuk a m√≥dos√≠tott f√°jlra a git add parancsot, 
    commitoljuk √©s a git push paranccsal felt√∂ltj√ºk a t√°voli repora.


-Weboldal publik√°l√°sa github-on kereszt√ºl.
    -Ha t√°voli repo-t haszn√°lunk √©s fel-push-oltuk a f√°jljainkat, akkor katt. a settings-re a github weboldal√°n a reponkn√°l.
    -A baloldali f√ºgg≈ëleges men≈±sor v√©g√©n van egy opci√≥ hogy pages -> katt. r√°.
    -K√∂z√©pt√°jon a branch-n√°l a none-t √°t√°ll√≠tjuk main-ra /vagy ha m√°s branch nevet adtunk meg akkor arra/ √©s save.
    -Megjelenik egy link /van amikor t√∂bb perc is eltelik/ amit a b√∂ng√©sz≈ëbe m√°solva megny√≠lik az oldalunk.

-Nagy vonalakban ennyi. :)


GIT
fogalmak
repository ‚Äì rakt√°r, k√∂nyvt√°r. itt t√°rol√≥dik a munk√°nk, t√°rol, rendszerez, hozz√°f√©r√©st biztos√≠t

git - - version		aktu√°lis verzi√≥

kezd√©s	vscode ->terminal

parancsok

cls		t√∂rli a termin√°l ablak√°t

mkdir mappan√©v	/ l√©trehozza a project mapp√°j√°t. csak akkor, ha m√©g nincs l√©trehozva a mappa amiben a project van /
cd mappan√©v	/ bel√©p a project mapp√°j√°ba ‚Äì munka mappa /
ls		kilist√°zza a projekt mapp√°ban lev≈ë mapp√°kat √©s f√°jlokat
git init		l√©trehoz egy helyi √ºres repot / .git /
git status	a repor√≥l ad vissza inf√≥t, pl ha beker√ºl √∫j f√°jl akkor jelzi
git add	file	hozz√°adja a sz√≠npadhoz /am√≠g nem commitoljuk addig itt van / a file-t, ha be√≠rjuk az els≈ë karaktert majd TAB akkor kieg√©sz√≠ti		t√∂bb f√°jlt is adhatok hozz√° √≠gy, nem rakja m√©g a repoba, am√≠g nem coomitolom
git commit -m	elk√ºldi a repoba a f√°jlt / -m -> message /
git add mappa/*	a mapp√°ban lev≈ë f√°jlokat k√ºldi
git add *.txt	az √∂sszes txt kiterjeszt√©s≈± f√°jlt a sz√≠npadra k√ºldi
git add .	 az √∂sszes f√°jlt hozz√°adja
git log		kilist√°zza az eddigi commitokat
git log ‚Äìoneline		ua. csak egy sorban
git remote add origin url	t√°voli repohoz csatlakoz√°s
git push -u origin master	a t√°voli repoba k√ºldi a helyi repot, ha az -u -t megadjuk akkor legk√∂zelebb el√©g csak a git push -t kiadni
git config ‚Äìglobal user.email ‚Äûemail@cim‚Äù	a t√°voli repohoz az email c√≠m be√°ll√≠t√°sa, --global helyett ‚Äìlocal akkor a helyi g√©pen
git config ‚Äìglobal user.name ‚Äûnev‚Äù		ezen a n√©ven jelennek meg a repoid
kijelentkez√©skor: git config --global ‚Äì unset user.name ‚Äûn√©v‚Äù
   git config --global ‚Äìunset user.email ‚Äûemail‚Äù

git pull origin master		lek√©ri a t√°voli repot
git pull origin master - -allow-unreleated-histories	ha nem akar pullolni akkor haszn√°ljuk
git clone url	ha m√°r van t√°voli repo de nincs localis
Ha m√°r valaki PUSHolt a remote repo fel√©, akkor a t√∂bbieknek musz√°ly PULLolnia miel≈ëtt PUSHolni tudna!
git diff HEAD	megmutatja hogy az utols√≥ commitunk √≥ta milyen f√°jlok v√°ltoztak a remote repon
git diff f√°jln√©v	az adott f√°jl v√°ltoz√°sait mutatja
git diff - -staged	a sz√≠npadon /stage/ lev≈ë f√°jlokr√≥l is megmutatja a v√°ltoz√°sokat
git reset f√°jln√©v	leveszi a sz√≠npadr√≥l a f√°jlt
git checkout - -f√°jln√©v	vissza√°ll√≠tja f√°jt a m√≥dos√≠t√°s el≈ëttire, ne haszn√°ljuk üòä
git checkout XXXX	a commit els≈ë n√©gy karaktere, vissza√°ll√≠tja a verzi√≥ra
git branch branch_neve	√∫j branch l√©trehoz√°sa
git branch		megmutatja melyik branchba vagyunk
git checkout branch_neve	√°tv√°lt a branch_neve branchra
git rm ‚Äû*txt‚Äù		t√∂rli az √∂sszes .txt-t csak abb√≥l a branchb√≥l ahol vagyunk
git merge branch_neve		√∂sszef√©s√ºli az adott branchet a branch_neve branchhel
git branch -d branch_neve	t√∂rli a branchet
gitk		grafikus fel√ºlet
git reflog	ki√≠rja az eddigi kommitokat


https://www.brainextension.hu/2014/08/22/ujabb-git-parancssori-okossagok-addrmresetlog/
https://www.youtube.com/playlist?list=PLyriihBWoulw1KQ2aM-NMnAoVPZevfmZq



